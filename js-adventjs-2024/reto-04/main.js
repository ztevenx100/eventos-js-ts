/*Reto #4: 游꾻 Decorando el 치rbol de Navidad*/
/**
* 춰Es hora de poner el 치rbol de Navidad en casa! 游꾻 Pero este a침o queremos que sea especial. Vamos a crear una funci칩n que recibe la altura del 치rbol (un entero positivo entre 1 y 100) y un car치cter especial para decorarlo.
* La funci칩n debe devolver un string que represente el 치rbol de Navidad, construido de la siguiente manera:
* El 치rbol est치 compuesto de tri치ngulos de caracteres especiales.
* Los espacios en blanco a los lados del 치rbol se representan con guiones bajos _.
* Todos los 치rboles tienen un tronco de dos l칤neas, representado por el car치cter #.
* El 치rbol siempre debe tener la misma longitud por cada lado.
* Debes asegurarte de que el 치rbol tenga la forma correcta usando saltos de l칤nea \n para cada l칤nea.
*/
/** Ejemplos:
const tree = createXmasTree(5, '*')
console.log(tree)
____*____
___***___
__*****__
_*******_
*********
____#____
____#____
*/

/**
const tree2 = createXmasTree(3, '+')
console.log(tree2)
__+__
_+++_
+++++
__#__
__#__
*/

/**
const tree3 = createXmasTree(6, '@')
console.log(tree3)
_____@_____
____@@@____
___@@@@@___
__@@@@@@@__
_@@@@@@@@@_
@@@@@@@@@@@
_____#_____
_____#_____
*/

function createXmasTree(height, ornament) {
  if (height < 1 || height > 100 || typeof height !== 'number') {
    throw new Error('La altura debe ser un n칰mero entero positivo entre 1 y 100.');
  }

  const tree = [];

  // Generar el tri치ngulo del 치rbol
  for (let i = 0; i < height; i++) {
    const spaces = '_'.repeat(height - i - 1);
    const chars = ornament.repeat(2 * i + 1);
    tree.push(`${spaces}${chars}${spaces}`);
  }

  // Generar el tronco del 치rbol
  const trunk = '_'.repeat(height - 1) + '#' + '_'.repeat(height - 1);
  tree.push(trunk, trunk);

  return tree.join('\n');
}

function createXmasTree(height, ornament) {
  if (!Number.isInteger(height) || height < 1 || height > 100) {
    throw new Error('La altura debe ser un n칰mero entero positivo entre 1 y 100.');
  }

  const tree = Array.from({ length: height }, (_, i) => {
    const spaces = '_'.repeat(height - i - 1);
    const chars = ornament.repeat(2 * i + 1);
    return `${spaces}${chars}${spaces}`;
  });

  const trunk = '_'.repeat(height - 1) + '#' + '_'.repeat(height - 1);
  tree.push(trunk, trunk);

  return tree.join('\n');
}

if (!Number.isInteger(height) || height < 1 || height > 100) {
  throw new Error('La altura debe ser un n칰mero entero positivo entre 1 y 100.');
}

const trunk = '_'.repeat(height - 1) + '#' + '_'.repeat(height - 1);

return [
  ...Array.from({ length: height }, (_, i) => 
    '_'.repeat(height - i - 1) + ornament.repeat(2 * i + 1) + '_'.repeat(height - i - 1)
  ),
  trunk,
  trunk
].join('\n');

  
// Ejemplo de uso
const tree = createXmasTree(5, '*');
console.log(tree);

const tree2 = createXmasTree(3, '+');
console.log(tree2);

const tree3 = createXmasTree(6, '@');
console.log(tree3);
  