/* Reto #18: üìá La agenda m√°gica de Santa */
/** 
 * Santa Claus tiene una agenda m√°gica üìá donde guarda las direcciones de los ni√±os para entregar los regalos. El problema: la informaci√≥n de la agenda est√° mezclada y malformateada. Las l√≠neas contienen un n√∫mero de tel√©fono m√°gico, el nombre de un ni√±o y su direcci√≥n, pero todo est√° rodeado de caracteres extra√±os.
 * Santa necesita tu ayuda para encontrar informaci√≥n espec√≠fica de la agenda. Escribe una funci√≥n que, dado el contenido de la agenda y un n√∫mero de tel√©fono, devuelva el nombre del ni√±o y su direcci√≥n.
 * Ten en cuenta que en la agenda:
 * Los n√∫meros de tel√©fono est√°n formateados como +X-YYY-YYY-YYY (donde X es uno o dos d√≠gitos, e Y es un d√≠gito).
 * El nombre de cada ni√±o est√° siempre entre < y >
 * La idea es que escribas una funci√≥na que, pas√°ndole el tel√©fono completo o una parte, devuelva el nombre y direcci√≥n del ni√±o. Si no encuentra nada o hay m√°s de un resultado, debes devolver null.
    const agenda = `+34-600-123-456 Calle Gran Via 12 <Juan Perez>
    Plaza Mayor 45 Madrid 28013 <Maria Gomez> +34-600-987-654
    <Carlos Ruiz> +1-800-555-0199 Fifth Ave New York`
    findInAgenda(agenda, '34-600-123-456')
    // { name: "Juan Perez", address: "Calle Gran Via 12" }
*/

/**
 * Encuentra informaci√≥n en la agenda seg√∫n el n√∫mero de tel√©fono
 * @param {string} agenda - Contenido de la agenda
 * @param {string} phone - N√∫mero de tel√©fono o parte de √©l
 * @returns {{ name: string, address: string } | null}
 */
function findInAgenda(agenda, phone) {
    // Dividimos la agenda en l√≠neas para procesarlas una por una
    const lines = agenda.split('\n');
    const results = [];

    const phoneRegex = /(\+\d{1,2}-\d{3}-\d{3}-\d{3})/; // Formato de tel√©fono completo
    const nameRegex = /<([^>]+)>/; // Formato del nombre entre < y >

    for (const line of lines) {
        // Buscar el n√∫mero de tel√©fono, nombre y direcci√≥n en la l√≠nea
        const phoneMatch = line.match(phoneRegex);
        const nameMatch = line.match(nameRegex);

        if (phoneMatch && nameMatch && phoneMatch[0].includes(phone)) {
            const phone = phoneMatch[0];
            const name = nameMatch[1];

            // Extraer la direcci√≥n quitando el tel√©fono y el nombre de la l√≠nea
            const address = line.replace(phone, '').replace(nameMatch[0], '').trim();

            results.push({ name, address });
        }
    }

    // Validar resultados
    if (results.length === 1) {
        return results[0];
    } else {
        return null; // Ning√∫n resultado o m√°s de un resultado
    }
}
